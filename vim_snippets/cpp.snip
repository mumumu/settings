include c.snip

# #include <...>
snippet inc
options     head
alias   #inc, #include
    #include <${1:iostream}>${0}
# #include "..."
snippet inc2
options     head
alias   #inc2, #include2
    #include "${1}"${0}

snippet     template
abbr        template <T>
    template<typename ${1:T}> ${0}

snippet     class
options     head
abbr        class {}
    class ${1:#:name} {
        ${2}
    };

snippet     classwc
options     head
abbr        class {}
    class ${1:#:name} {
        ${2}
    public:
        $1(${3});
    };
    $1::$1($3) {
        ${0:TARGET}
    }

snippet     try
options     head
abbr        try catch
    try {
        ${1:#:TARGET}
    } catch (${2:...}) {
        ${3}
    }


# lambda expression ( C++11 feature )
snippet     lambda
abbr        [](){}
    [${1}](${2})${3}{ ${4:TARGET} }${0:;}

# scoped enumeration ( C++11 feature )
snippet     enum_scoped
options     head
abbr        enum struct {};
    enum struct ${1:#:name} { ${2:#:TARGET} };

# static assert ( C++11 feature )
snippet     static_assert
abbr        static_assert(,"")
    static_assert( ${1}, "${2}" );${0}

delete      namespace
options     head
snippet     namespace
abbr        namespace {}
    namespace ${1:#:name} {
        ${0:TARGET}
    } // namespace $1

snippet     static_cast
abbr        static_cast<>()
    static_cast<${1}>(${2})${0}

snippet     reinterpret_cast
abbr        reinterpret_cast<>()
    reinterpret_cast<${1}>(${2})${0}

snippet     const_cast
abbr        const_cast<>()
    const_cast<${1}>(${2})${0}

snippet     dynamic_cast
abbr        dynamic_cast<>()
    dynamic_cast<${1}>(${2})${0}

snippet     helloworld
abbr        #include<iostream> int main...
    #include <iostream>

    int main(int argc, char *argv[]) {
        std::cout << "hello, world!" << std::endl;
        return 0;
    }

snippet     ci
options     head
  cin >> ${0};

snippet     il
options     head
  int ${2:name};
  cin >> $2;

snippet     ull
options     head
  uint64_t ${2:name};
  cin >> $2;

snippet     i
alias       l
options     head
  int ${0};

snippet     s
options     head
  string ${0};

snippet     se
alias       set
options     head
  set<${1:int}> ${2};

snippet     ll
options     head
  int64_t ${0};

snippet     p
options     head
  cout << ${0:TARGET}

snippet     el
  << endl;

snippet     pl
options     head
  cout << ${0:TARGET} << endl;

# vector initialization
snippet     iv
alias       ve, vi, vec
options     head
    vector<${1:int}> ${2:arr}(${3:0});
    ${4}

# sort array
snippet     sort
alias       st, sor
options     head
    sort(${1:arr}.begin(), $1.end());${0}

# setprecision
snippet     setprecision
alias       setp, setpre, setpreci
options     head
    setprecision(${1:15});${0}


# init vector
snippet     fori
options     head
abbr        forv
    for (int ${1:i} = 0; $1 < ${2}; $1++) cin >> arr[$1];
    ${0}

# range based for ( C++11 feature )
snippet     for1
options     head
abbr        for (:) {}
    for (${1:auto& }${2:var}: ${3:container}) {
        ${0}
    }

# Counter based for's (don't ask for the type or count start)
snippet     fori6
options     head
abbr        for (int64_t x;...; x++) {}
    for (int64_t ${1:i} = 0; $1 < ${2}; $1++) {
        ${0}
    }

# codeforces input template
snippet     cf
options     head
abbr        for (int64_t x;...; x++) {}
    int t;
    cin >> t;
    for (int i = 0; i < t; i++) {
        ${0}
    }

snippet     main
abbr        #include<bits/stdc++.h> int main...
  #include <bits/stdc++.h>

  using namespace std;

  int main(int argc, char *argv[]) {${0}
      return 0;
  }
